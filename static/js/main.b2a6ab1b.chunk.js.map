{"version":3,"sources":["components/Heading.js","components/NotesList.js","components/AddNotesForm.js","Notes.js","components/ToDoForm.js","components/ToDo.js","ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["Heading","props","className","title","NotesList","usersItems","usersList","map","user","index","key","onClick","deleteUser","AddNotesForm","onSubmit","addUser","type","placeholder","onChange","getInputValue","value","currentValue","Notes","setCurrentInputValue","event","setState","currentInputValue","target","preventDefault","state","prevState","userIndex","filteredArray","filter","elem","this","Component","ToDoForm","text","handleChange","name","handleSubmit","complete","id","shortid","generate","React","style","textDecoration","todo","toggleComplete","onDelete","ToDoList","todos","addToDo","checkComplete","check","handleDeleteTodo","handleDeleteAllCompleteTodo","ToDo","length","App","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b2a6ab1b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Heading = (props) => {\r\n    return <h2 className=\"project-title\">{props.title}</h2>;\r\n}\r\n\r\nexport default Heading;","import React from 'react';\r\n\r\nconst NotesList = (props) => {\r\n\r\n    let usersItems = props.usersList.map((user, index)=>{\r\n        return <div key={index} className='notes' onClick={()=>props.deleteUser(index)} ><p>{user}</p></div>;\r\n    });\r\n\r\n    return (\r\n        <div className=\"notes-desk\">\r\n            {usersItems}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotesList;","import React from 'react';\r\n\r\nconst AddNotesForm = (props) => {\r\n    return (\r\n        <form className=\"add-note-form\" onSubmit={props.addUser}>\r\n            <textarea \r\n                className=\"textarea-note\"\r\n                type=\"text\" \r\n                placeholder=\"Notatka\" \r\n                onChange={props.getInputValue} \r\n                value={props.currentValue} \r\n            />\r\n            <button className=\"button-note\">+</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default AddNotesForm;","import React, {Component} from 'react';\r\n\r\nimport Heading from './components/Heading';\r\nimport NotesList from './components/NotesList';\r\nimport AddNotesForm from './components/AddNotesForm';\r\n\r\nclass Notes extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            usersList: [],\r\n            currentInputValue: ''\r\n        }\r\n    }\r\n\r\n    setCurrentInputValue = (event) => {\r\n        this.setState({currentInputValue: event.target.value})\r\n    }\r\n\r\n    addUser = (event) => {\r\n        event.preventDefault();\r\n\r\n        if(this.state.currentInputValue === '') return;\r\n\r\n        this.setState(prevState=>{\r\n            return({\r\n                usersList: [...prevState.usersList, this.state.currentInputValue],\r\n                currentInputValue: ''\r\n            });\r\n        });\r\n    }\r\n\r\n    deleteUser = (userIndex) => {\r\n        let filteredArray = this.state.usersList.filter((elem, index)=>{\r\n            return index !== userIndex;\r\n        });\r\n        this.setState({usersList: filteredArray})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"l-side\">\r\n                <Heading title='Dodaj notatkÄ™' />\r\n                <AddNotesForm \r\n                    addUser={this.addUser} \r\n                    getInputValue={this.setCurrentInputValue}\r\n                    currentValue={this.state.currentInputValue}\r\n                />\r\n                <NotesList \r\n                    usersList={this.state.usersList}\r\n                    deleteUser={this.deleteUser} \r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Notes;","import React from 'react';\r\nimport shortid from 'shortid';\r\n\r\nexport default class ToDoForm extends React.Component {\r\n\r\n    state = {\r\n        text: ''\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.onSubmit({\r\n            text: this.state.text,\r\n            complete: false,\r\n            id: shortid.generate()\r\n        });\r\n        this.setState({\r\n            text: ''\r\n        });\r\n    }\r\n \r\n    render() {\r\n        return (\r\n            <form className=\"add-note-form\" onSubmit={this.handleSubmit}>\r\n                <input \r\n                    className=\"textarea-note\"\r\n                    name=\"text\"\r\n                    value={this.state.text} \r\n                    onChange={this.handleChange}\r\n                    placeholder=\"What to do\"\r\n                />\r\n                <button className=\"button-note\" onClick={this.handleSubmit}>+</button>\r\n            </form>\r\n        )}\r\n}","import React from 'react';\r\n\r\n\r\nexport default props => (\r\n    <div className='todo'>\r\n        <div style={{\r\n            textDecoration: props.todo.complete ? 'line-through' : ''\r\n        }} onClick={props.toggleComplete}>{props.todo.text}\r\n        </div>\r\n        <div className=\"btn-delete\" onClick={props.onDelete}></div>\r\n    </div>\r\n    );","import React from 'react';\r\n\r\nimport ToDoForm from './components/ToDoForm';\r\nimport ToDo from './components/ToDo';\r\nimport Heading from './components/Heading';\r\n\r\nexport default class ToDoList extends React.Component {\r\n\r\n    state = {\r\n        todos: [],\r\n        filter: 'all'\r\n    };\r\n\r\n    addToDo = (todo) => {\r\n        this.setState({\r\n            todos: [todo, ...this.state.todos]\r\n        })\r\n    }\r\n\r\n    toggleComplete = (id) => {\r\n        this.setState({\r\n            todos: this.state.todos.map(todo => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                        id: todo.id,\r\n                        text: todo.text,\r\n                        complete: !todo.complete\r\n                    };\r\n                } else {\r\n                    return todo;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    checkComplete = (check) => {\r\n        this.setState({\r\n            filter : check\r\n        })\r\n    }\r\n\r\n    handleDeleteTodo = (id) => {\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo => todo.id !== id)\r\n        })\r\n    }\r\n\r\n    handleDeleteAllCompleteTodo = () => {\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo => !todo.complete)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let todos=[];\r\n\r\n        if (this.state.filter === 'all') {\r\n            todos = this.state.todos;\r\n        } else if (this.state.filter === 'active'){\r\n            todos = this.state.todos.filter(todo => !todo.complete);\r\n        } else if (this.state.filter === 'complete'){\r\n            todos = this.state.todos.filter(todo => todo.complete);\r\n        }\r\n\r\n        return (\r\n        <div className=\"r-side\">\r\n            <div className=\"r-sideContain\">\r\n                <Heading title='Dodaj sprawÄ™' />\r\n                <ToDoForm onSubmit={this.addToDo}/>\r\n                <div className='list'>\r\n                    {todos.map(todo => (\r\n                        <ToDo \r\n                        onDelete = {() => this.handleDeleteTodo(todo.id)}\r\n                        key={todo.id} \r\n                        todo={todo} \r\n                        toggleComplete={()=>this.toggleComplete(todo.id)} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            <div className='bottomContainer'>\r\n                    <button onClick={()=> this.checkComplete('all')}>Wszystkie: {this.state.todos.filter(todo => todo).length}</button>\r\n                    <button onClick={()=> this.checkComplete('active')}>Aktywne: {this.state.todos.filter(todo => !todo.complete).length}</button>\r\n                    <button onClick={()=> this.checkComplete('complete')}>Zrobione: {this.state.todos.filter(todo => todo.complete).length}</button>\r\n                    <button onClick={this.handleDeleteAllCompleteTodo}>UsuÅ„ wszystkie zrobione sprawy</button>\r\n            </div>\r\n        </div>\r\n        )}\r\n}","import React from 'react';\nimport './App.css';\n\nimport Notes from './Notes';\nimport ToDoList from './ToDoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div class=\"desk-container\">\n        <div id=\"desk\">\n          <Notes />\n          <ToDoList />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}